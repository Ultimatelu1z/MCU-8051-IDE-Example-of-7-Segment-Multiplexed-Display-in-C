                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module MUX
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _Display7Seg
                                     12 	.globl _interrupcaoTimer1
                                     13 	.globl _main
                                     14 	.globl _recarregaTimer
                                     15 	.globl _TF2
                                     16 	.globl _EXF2
                                     17 	.globl _RCLK
                                     18 	.globl _TCLK
                                     19 	.globl _EXEN2
                                     20 	.globl _TR2
                                     21 	.globl _C_T2
                                     22 	.globl _CP_RL2
                                     23 	.globl _T2CON_7
                                     24 	.globl _T2CON_6
                                     25 	.globl _T2CON_5
                                     26 	.globl _T2CON_4
                                     27 	.globl _T2CON_3
                                     28 	.globl _T2CON_2
                                     29 	.globl _T2CON_1
                                     30 	.globl _T2CON_0
                                     31 	.globl _PT2
                                     32 	.globl _ET2
                                     33 	.globl _CY
                                     34 	.globl _AC
                                     35 	.globl _F0
                                     36 	.globl _RS1
                                     37 	.globl _RS0
                                     38 	.globl _OV
                                     39 	.globl _F1
                                     40 	.globl _P
                                     41 	.globl _PS
                                     42 	.globl _PT1
                                     43 	.globl _PX1
                                     44 	.globl _PT0
                                     45 	.globl _PX0
                                     46 	.globl _RD
                                     47 	.globl _WR
                                     48 	.globl _T1
                                     49 	.globl _T0
                                     50 	.globl _INT1
                                     51 	.globl _INT0
                                     52 	.globl _TXD
                                     53 	.globl _RXD
                                     54 	.globl _P3_7
                                     55 	.globl _P3_6
                                     56 	.globl _P3_5
                                     57 	.globl _P3_4
                                     58 	.globl _P3_3
                                     59 	.globl _P3_2
                                     60 	.globl _P3_1
                                     61 	.globl _P3_0
                                     62 	.globl _EA
                                     63 	.globl _ES
                                     64 	.globl _ET1
                                     65 	.globl _EX1
                                     66 	.globl _ET0
                                     67 	.globl _EX0
                                     68 	.globl _P2_7
                                     69 	.globl _P2_6
                                     70 	.globl _P2_5
                                     71 	.globl _P2_4
                                     72 	.globl _P2_3
                                     73 	.globl _P2_2
                                     74 	.globl _P2_1
                                     75 	.globl _P2_0
                                     76 	.globl _SM0
                                     77 	.globl _SM1
                                     78 	.globl _SM2
                                     79 	.globl _REN
                                     80 	.globl _TB8
                                     81 	.globl _RB8
                                     82 	.globl _TI
                                     83 	.globl _RI
                                     84 	.globl _P1_7
                                     85 	.globl _P1_6
                                     86 	.globl _P1_5
                                     87 	.globl _P1_4
                                     88 	.globl _P1_3
                                     89 	.globl _P1_2
                                     90 	.globl _P1_1
                                     91 	.globl _P1_0
                                     92 	.globl _TF1
                                     93 	.globl _TR1
                                     94 	.globl _TF0
                                     95 	.globl _TR0
                                     96 	.globl _IE1
                                     97 	.globl _IT1
                                     98 	.globl _IE0
                                     99 	.globl _IT0
                                    100 	.globl _P0_7
                                    101 	.globl _P0_6
                                    102 	.globl _P0_5
                                    103 	.globl _P0_4
                                    104 	.globl _P0_3
                                    105 	.globl _P0_2
                                    106 	.globl _P0_1
                                    107 	.globl _P0_0
                                    108 	.globl _TH2
                                    109 	.globl _TL2
                                    110 	.globl _RCAP2H
                                    111 	.globl _RCAP2L
                                    112 	.globl _T2CON
                                    113 	.globl _B
                                    114 	.globl _ACC
                                    115 	.globl _PSW
                                    116 	.globl _IP
                                    117 	.globl _P3
                                    118 	.globl _IE
                                    119 	.globl _P2
                                    120 	.globl _SBUF
                                    121 	.globl _SCON
                                    122 	.globl _P1
                                    123 	.globl _TH1
                                    124 	.globl _TH0
                                    125 	.globl _TL1
                                    126 	.globl _TL0
                                    127 	.globl _TMOD
                                    128 	.globl _TCON
                                    129 	.globl _PCON
                                    130 	.globl _DPH
                                    131 	.globl _DPL
                                    132 	.globl _SP
                                    133 	.globl _P0
                                    134 	.globl _Decod7Seg
                                    135 	.globl _DezMinutos
                                    136 	.globl _UnidMinutos
                                    137 	.globl _DezSegundos
                                    138 	.globl _UnidSegundos
                                    139 ;--------------------------------------------------------
                                    140 ; special function registers
                                    141 ;--------------------------------------------------------
                                    142 	.area RSEG    (ABS,DATA)
      000000                        143 	.org 0x0000
                           000080   144 G$P0$0_0$0 == 0x0080
                           000080   145 _P0	=	0x0080
                           000081   146 G$SP$0_0$0 == 0x0081
                           000081   147 _SP	=	0x0081
                           000082   148 G$DPL$0_0$0 == 0x0082
                           000082   149 _DPL	=	0x0082
                           000083   150 G$DPH$0_0$0 == 0x0083
                           000083   151 _DPH	=	0x0083
                           000087   152 G$PCON$0_0$0 == 0x0087
                           000087   153 _PCON	=	0x0087
                           000088   154 G$TCON$0_0$0 == 0x0088
                           000088   155 _TCON	=	0x0088
                           000089   156 G$TMOD$0_0$0 == 0x0089
                           000089   157 _TMOD	=	0x0089
                           00008A   158 G$TL0$0_0$0 == 0x008a
                           00008A   159 _TL0	=	0x008a
                           00008B   160 G$TL1$0_0$0 == 0x008b
                           00008B   161 _TL1	=	0x008b
                           00008C   162 G$TH0$0_0$0 == 0x008c
                           00008C   163 _TH0	=	0x008c
                           00008D   164 G$TH1$0_0$0 == 0x008d
                           00008D   165 _TH1	=	0x008d
                           000090   166 G$P1$0_0$0 == 0x0090
                           000090   167 _P1	=	0x0090
                           000098   168 G$SCON$0_0$0 == 0x0098
                           000098   169 _SCON	=	0x0098
                           000099   170 G$SBUF$0_0$0 == 0x0099
                           000099   171 _SBUF	=	0x0099
                           0000A0   172 G$P2$0_0$0 == 0x00a0
                           0000A0   173 _P2	=	0x00a0
                           0000A8   174 G$IE$0_0$0 == 0x00a8
                           0000A8   175 _IE	=	0x00a8
                           0000B0   176 G$P3$0_0$0 == 0x00b0
                           0000B0   177 _P3	=	0x00b0
                           0000B8   178 G$IP$0_0$0 == 0x00b8
                           0000B8   179 _IP	=	0x00b8
                           0000D0   180 G$PSW$0_0$0 == 0x00d0
                           0000D0   181 _PSW	=	0x00d0
                           0000E0   182 G$ACC$0_0$0 == 0x00e0
                           0000E0   183 _ACC	=	0x00e0
                           0000F0   184 G$B$0_0$0 == 0x00f0
                           0000F0   185 _B	=	0x00f0
                           0000C8   186 G$T2CON$0_0$0 == 0x00c8
                           0000C8   187 _T2CON	=	0x00c8
                           0000CA   188 G$RCAP2L$0_0$0 == 0x00ca
                           0000CA   189 _RCAP2L	=	0x00ca
                           0000CB   190 G$RCAP2H$0_0$0 == 0x00cb
                           0000CB   191 _RCAP2H	=	0x00cb
                           0000CC   192 G$TL2$0_0$0 == 0x00cc
                           0000CC   193 _TL2	=	0x00cc
                           0000CD   194 G$TH2$0_0$0 == 0x00cd
                           0000CD   195 _TH2	=	0x00cd
                                    196 ;--------------------------------------------------------
                                    197 ; special function bits
                                    198 ;--------------------------------------------------------
                                    199 	.area RSEG    (ABS,DATA)
      000000                        200 	.org 0x0000
                           000080   201 G$P0_0$0_0$0 == 0x0080
                           000080   202 _P0_0	=	0x0080
                           000081   203 G$P0_1$0_0$0 == 0x0081
                           000081   204 _P0_1	=	0x0081
                           000082   205 G$P0_2$0_0$0 == 0x0082
                           000082   206 _P0_2	=	0x0082
                           000083   207 G$P0_3$0_0$0 == 0x0083
                           000083   208 _P0_3	=	0x0083
                           000084   209 G$P0_4$0_0$0 == 0x0084
                           000084   210 _P0_4	=	0x0084
                           000085   211 G$P0_5$0_0$0 == 0x0085
                           000085   212 _P0_5	=	0x0085
                           000086   213 G$P0_6$0_0$0 == 0x0086
                           000086   214 _P0_6	=	0x0086
                           000087   215 G$P0_7$0_0$0 == 0x0087
                           000087   216 _P0_7	=	0x0087
                           000088   217 G$IT0$0_0$0 == 0x0088
                           000088   218 _IT0	=	0x0088
                           000089   219 G$IE0$0_0$0 == 0x0089
                           000089   220 _IE0	=	0x0089
                           00008A   221 G$IT1$0_0$0 == 0x008a
                           00008A   222 _IT1	=	0x008a
                           00008B   223 G$IE1$0_0$0 == 0x008b
                           00008B   224 _IE1	=	0x008b
                           00008C   225 G$TR0$0_0$0 == 0x008c
                           00008C   226 _TR0	=	0x008c
                           00008D   227 G$TF0$0_0$0 == 0x008d
                           00008D   228 _TF0	=	0x008d
                           00008E   229 G$TR1$0_0$0 == 0x008e
                           00008E   230 _TR1	=	0x008e
                           00008F   231 G$TF1$0_0$0 == 0x008f
                           00008F   232 _TF1	=	0x008f
                           000090   233 G$P1_0$0_0$0 == 0x0090
                           000090   234 _P1_0	=	0x0090
                           000091   235 G$P1_1$0_0$0 == 0x0091
                           000091   236 _P1_1	=	0x0091
                           000092   237 G$P1_2$0_0$0 == 0x0092
                           000092   238 _P1_2	=	0x0092
                           000093   239 G$P1_3$0_0$0 == 0x0093
                           000093   240 _P1_3	=	0x0093
                           000094   241 G$P1_4$0_0$0 == 0x0094
                           000094   242 _P1_4	=	0x0094
                           000095   243 G$P1_5$0_0$0 == 0x0095
                           000095   244 _P1_5	=	0x0095
                           000096   245 G$P1_6$0_0$0 == 0x0096
                           000096   246 _P1_6	=	0x0096
                           000097   247 G$P1_7$0_0$0 == 0x0097
                           000097   248 _P1_7	=	0x0097
                           000098   249 G$RI$0_0$0 == 0x0098
                           000098   250 _RI	=	0x0098
                           000099   251 G$TI$0_0$0 == 0x0099
                           000099   252 _TI	=	0x0099
                           00009A   253 G$RB8$0_0$0 == 0x009a
                           00009A   254 _RB8	=	0x009a
                           00009B   255 G$TB8$0_0$0 == 0x009b
                           00009B   256 _TB8	=	0x009b
                           00009C   257 G$REN$0_0$0 == 0x009c
                           00009C   258 _REN	=	0x009c
                           00009D   259 G$SM2$0_0$0 == 0x009d
                           00009D   260 _SM2	=	0x009d
                           00009E   261 G$SM1$0_0$0 == 0x009e
                           00009E   262 _SM1	=	0x009e
                           00009F   263 G$SM0$0_0$0 == 0x009f
                           00009F   264 _SM0	=	0x009f
                           0000A0   265 G$P2_0$0_0$0 == 0x00a0
                           0000A0   266 _P2_0	=	0x00a0
                           0000A1   267 G$P2_1$0_0$0 == 0x00a1
                           0000A1   268 _P2_1	=	0x00a1
                           0000A2   269 G$P2_2$0_0$0 == 0x00a2
                           0000A2   270 _P2_2	=	0x00a2
                           0000A3   271 G$P2_3$0_0$0 == 0x00a3
                           0000A3   272 _P2_3	=	0x00a3
                           0000A4   273 G$P2_4$0_0$0 == 0x00a4
                           0000A4   274 _P2_4	=	0x00a4
                           0000A5   275 G$P2_5$0_0$0 == 0x00a5
                           0000A5   276 _P2_5	=	0x00a5
                           0000A6   277 G$P2_6$0_0$0 == 0x00a6
                           0000A6   278 _P2_6	=	0x00a6
                           0000A7   279 G$P2_7$0_0$0 == 0x00a7
                           0000A7   280 _P2_7	=	0x00a7
                           0000A8   281 G$EX0$0_0$0 == 0x00a8
                           0000A8   282 _EX0	=	0x00a8
                           0000A9   283 G$ET0$0_0$0 == 0x00a9
                           0000A9   284 _ET0	=	0x00a9
                           0000AA   285 G$EX1$0_0$0 == 0x00aa
                           0000AA   286 _EX1	=	0x00aa
                           0000AB   287 G$ET1$0_0$0 == 0x00ab
                           0000AB   288 _ET1	=	0x00ab
                           0000AC   289 G$ES$0_0$0 == 0x00ac
                           0000AC   290 _ES	=	0x00ac
                           0000AF   291 G$EA$0_0$0 == 0x00af
                           0000AF   292 _EA	=	0x00af
                           0000B0   293 G$P3_0$0_0$0 == 0x00b0
                           0000B0   294 _P3_0	=	0x00b0
                           0000B1   295 G$P3_1$0_0$0 == 0x00b1
                           0000B1   296 _P3_1	=	0x00b1
                           0000B2   297 G$P3_2$0_0$0 == 0x00b2
                           0000B2   298 _P3_2	=	0x00b2
                           0000B3   299 G$P3_3$0_0$0 == 0x00b3
                           0000B3   300 _P3_3	=	0x00b3
                           0000B4   301 G$P3_4$0_0$0 == 0x00b4
                           0000B4   302 _P3_4	=	0x00b4
                           0000B5   303 G$P3_5$0_0$0 == 0x00b5
                           0000B5   304 _P3_5	=	0x00b5
                           0000B6   305 G$P3_6$0_0$0 == 0x00b6
                           0000B6   306 _P3_6	=	0x00b6
                           0000B7   307 G$P3_7$0_0$0 == 0x00b7
                           0000B7   308 _P3_7	=	0x00b7
                           0000B0   309 G$RXD$0_0$0 == 0x00b0
                           0000B0   310 _RXD	=	0x00b0
                           0000B1   311 G$TXD$0_0$0 == 0x00b1
                           0000B1   312 _TXD	=	0x00b1
                           0000B2   313 G$INT0$0_0$0 == 0x00b2
                           0000B2   314 _INT0	=	0x00b2
                           0000B3   315 G$INT1$0_0$0 == 0x00b3
                           0000B3   316 _INT1	=	0x00b3
                           0000B4   317 G$T0$0_0$0 == 0x00b4
                           0000B4   318 _T0	=	0x00b4
                           0000B5   319 G$T1$0_0$0 == 0x00b5
                           0000B5   320 _T1	=	0x00b5
                           0000B6   321 G$WR$0_0$0 == 0x00b6
                           0000B6   322 _WR	=	0x00b6
                           0000B7   323 G$RD$0_0$0 == 0x00b7
                           0000B7   324 _RD	=	0x00b7
                           0000B8   325 G$PX0$0_0$0 == 0x00b8
                           0000B8   326 _PX0	=	0x00b8
                           0000B9   327 G$PT0$0_0$0 == 0x00b9
                           0000B9   328 _PT0	=	0x00b9
                           0000BA   329 G$PX1$0_0$0 == 0x00ba
                           0000BA   330 _PX1	=	0x00ba
                           0000BB   331 G$PT1$0_0$0 == 0x00bb
                           0000BB   332 _PT1	=	0x00bb
                           0000BC   333 G$PS$0_0$0 == 0x00bc
                           0000BC   334 _PS	=	0x00bc
                           0000D0   335 G$P$0_0$0 == 0x00d0
                           0000D0   336 _P	=	0x00d0
                           0000D1   337 G$F1$0_0$0 == 0x00d1
                           0000D1   338 _F1	=	0x00d1
                           0000D2   339 G$OV$0_0$0 == 0x00d2
                           0000D2   340 _OV	=	0x00d2
                           0000D3   341 G$RS0$0_0$0 == 0x00d3
                           0000D3   342 _RS0	=	0x00d3
                           0000D4   343 G$RS1$0_0$0 == 0x00d4
                           0000D4   344 _RS1	=	0x00d4
                           0000D5   345 G$F0$0_0$0 == 0x00d5
                           0000D5   346 _F0	=	0x00d5
                           0000D6   347 G$AC$0_0$0 == 0x00d6
                           0000D6   348 _AC	=	0x00d6
                           0000D7   349 G$CY$0_0$0 == 0x00d7
                           0000D7   350 _CY	=	0x00d7
                           0000AD   351 G$ET2$0_0$0 == 0x00ad
                           0000AD   352 _ET2	=	0x00ad
                           0000BD   353 G$PT2$0_0$0 == 0x00bd
                           0000BD   354 _PT2	=	0x00bd
                           0000C8   355 G$T2CON_0$0_0$0 == 0x00c8
                           0000C8   356 _T2CON_0	=	0x00c8
                           0000C9   357 G$T2CON_1$0_0$0 == 0x00c9
                           0000C9   358 _T2CON_1	=	0x00c9
                           0000CA   359 G$T2CON_2$0_0$0 == 0x00ca
                           0000CA   360 _T2CON_2	=	0x00ca
                           0000CB   361 G$T2CON_3$0_0$0 == 0x00cb
                           0000CB   362 _T2CON_3	=	0x00cb
                           0000CC   363 G$T2CON_4$0_0$0 == 0x00cc
                           0000CC   364 _T2CON_4	=	0x00cc
                           0000CD   365 G$T2CON_5$0_0$0 == 0x00cd
                           0000CD   366 _T2CON_5	=	0x00cd
                           0000CE   367 G$T2CON_6$0_0$0 == 0x00ce
                           0000CE   368 _T2CON_6	=	0x00ce
                           0000CF   369 G$T2CON_7$0_0$0 == 0x00cf
                           0000CF   370 _T2CON_7	=	0x00cf
                           0000C8   371 G$CP_RL2$0_0$0 == 0x00c8
                           0000C8   372 _CP_RL2	=	0x00c8
                           0000C9   373 G$C_T2$0_0$0 == 0x00c9
                           0000C9   374 _C_T2	=	0x00c9
                           0000CA   375 G$TR2$0_0$0 == 0x00ca
                           0000CA   376 _TR2	=	0x00ca
                           0000CB   377 G$EXEN2$0_0$0 == 0x00cb
                           0000CB   378 _EXEN2	=	0x00cb
                           0000CC   379 G$TCLK$0_0$0 == 0x00cc
                           0000CC   380 _TCLK	=	0x00cc
                           0000CD   381 G$RCLK$0_0$0 == 0x00cd
                           0000CD   382 _RCLK	=	0x00cd
                           0000CE   383 G$EXF2$0_0$0 == 0x00ce
                           0000CE   384 _EXF2	=	0x00ce
                           0000CF   385 G$TF2$0_0$0 == 0x00cf
                           0000CF   386 _TF2	=	0x00cf
                                    387 ;--------------------------------------------------------
                                    388 ; overlayable register banks
                                    389 ;--------------------------------------------------------
                                    390 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        391 	.ds 8
                                    392 ;--------------------------------------------------------
                                    393 ; overlayable bit register bank
                                    394 ;--------------------------------------------------------
                                    395 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        396 bits:
      000000                        397 	.ds 1
                           008000   398 	b0 = bits[0]
                           008100   399 	b1 = bits[1]
                           008200   400 	b2 = bits[2]
                           008300   401 	b3 = bits[3]
                           008400   402 	b4 = bits[4]
                           008500   403 	b5 = bits[5]
                           008600   404 	b6 = bits[6]
                           008700   405 	b7 = bits[7]
                                    406 ;--------------------------------------------------------
                                    407 ; internal ram data
                                    408 ;--------------------------------------------------------
                                    409 	.area DSEG    (DATA)
                           000000   410 G$UnidSegundos$0_0$0==.
      000000                        411 _UnidSegundos::
      000000                        412 	.ds 2
                           000002   413 G$DezSegundos$0_0$0==.
      000002                        414 _DezSegundos::
      000002                        415 	.ds 2
                           000004   416 G$UnidMinutos$0_0$0==.
      000004                        417 _UnidMinutos::
      000004                        418 	.ds 2
                           000006   419 G$DezMinutos$0_0$0==.
      000006                        420 _DezMinutos::
      000006                        421 	.ds 2
                           000008   422 G$Decod7Seg$0_0$0==.
      000008                        423 _Decod7Seg::
      000008                        424 	.ds 10
                                    425 ;--------------------------------------------------------
                                    426 ; overlayable items in internal ram
                                    427 ;--------------------------------------------------------
                                    428 ;--------------------------------------------------------
                                    429 ; Stack segment in internal ram
                                    430 ;--------------------------------------------------------
                                    431 	.area	SSEG
      000000                        432 __start__stack:
      000000                        433 	.ds	1
                                    434 
                                    435 ;--------------------------------------------------------
                                    436 ; indirectly addressable internal ram data
                                    437 ;--------------------------------------------------------
                                    438 	.area ISEG    (DATA)
                                    439 ;--------------------------------------------------------
                                    440 ; absolute internal ram data
                                    441 ;--------------------------------------------------------
                                    442 	.area IABS    (ABS,DATA)
                                    443 	.area IABS    (ABS,DATA)
                                    444 ;--------------------------------------------------------
                                    445 ; bit data
                                    446 ;--------------------------------------------------------
                                    447 	.area BSEG    (BIT)
                                    448 ;--------------------------------------------------------
                                    449 ; paged external ram data
                                    450 ;--------------------------------------------------------
                                    451 	.area PSEG    (PAG,XDATA)
                                    452 ;--------------------------------------------------------
                                    453 ; external ram data
                                    454 ;--------------------------------------------------------
                                    455 	.area XSEG    (XDATA)
                                    456 ;--------------------------------------------------------
                                    457 ; absolute external ram data
                                    458 ;--------------------------------------------------------
                                    459 	.area XABS    (ABS,XDATA)
                                    460 ;--------------------------------------------------------
                                    461 ; external initialized ram data
                                    462 ;--------------------------------------------------------
                                    463 	.area XISEG   (XDATA)
                                    464 	.area HOME    (CODE)
                                    465 	.area GSINIT0 (CODE)
                                    466 	.area GSINIT1 (CODE)
                                    467 	.area GSINIT2 (CODE)
                                    468 	.area GSINIT3 (CODE)
                                    469 	.area GSINIT4 (CODE)
                                    470 	.area GSINIT5 (CODE)
                                    471 	.area GSINIT  (CODE)
                                    472 	.area GSFINAL (CODE)
                                    473 	.area CSEG    (CODE)
                                    474 ;--------------------------------------------------------
                                    475 ; interrupt vector
                                    476 ;--------------------------------------------------------
                                    477 	.area HOME    (CODE)
      000000                        478 __interrupt_vect:
      000000 02r00r00         [24]  479 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  480 	reti
      000004                        481 	.ds	7
      00000B 02r00r1D         [24]  482 	ljmp	_interrupcaoTimer1
                                    483 ;--------------------------------------------------------
                                    484 ; global & static initialisations
                                    485 ;--------------------------------------------------------
                                    486 	.area HOME    (CODE)
                                    487 	.area GSINIT  (CODE)
                                    488 	.area GSFINAL (CODE)
                                    489 	.area GSINIT  (CODE)
                                    490 	.globl __sdcc_gsinit_startup
                                    491 	.globl __sdcc_program_startup
                                    492 	.globl __start__stack
                                    493 	.globl __mcs51_genXINIT
                                    494 	.globl __mcs51_genXRAMCLEAR
                                    495 	.globl __mcs51_genRAMCLEAR
                           000000   496 	C$MUX.c$3$1_0$9 ==.
                                    497 ;	MUX.c:3: int UnidSegundos=0;
      000000 E4               [12]  498 	clr	a
      000001 F5*00            [12]  499 	mov	_UnidSegundos,a
      000003 F5*01            [12]  500 	mov	(_UnidSegundos + 1),a
                           000005   501 	C$MUX.c$4$1_0$9 ==.
                                    502 ;	MUX.c:4: int DezSegundos=0;
      000005 F5*02            [12]  503 	mov	_DezSegundos,a
      000007 F5*03            [12]  504 	mov	(_DezSegundos + 1),a
                           000009   505 	C$MUX.c$5$1_0$9 ==.
                                    506 ;	MUX.c:5: int UnidMinutos=0;
      000009 F5*04            [12]  507 	mov	_UnidMinutos,a
      00000B F5*05            [12]  508 	mov	(_UnidMinutos + 1),a
                           00000D   509 	C$MUX.c$6$1_0$9 ==.
                                    510 ;	MUX.c:6: int DezMinutos=0;
      00000D F5*06            [12]  511 	mov	_DezMinutos,a
      00000F F5*07            [12]  512 	mov	(_DezMinutos + 1),a
                           000011   513 	C$MUX.c$8$1_0$9 ==.
                                    514 ;	MUX.c:8: unsigned char Decod7Seg[]={192,249,164,176,153,146,130,248,128,144};
      000011 75*08 C0         [24]  515 	mov	_Decod7Seg,#0xc0
      000014 75*09 F9         [24]  516 	mov	(_Decod7Seg + 0x0001),#0xf9
      000017 75*0A A4         [24]  517 	mov	(_Decod7Seg + 0x0002),#0xa4
      00001A 75*0B B0         [24]  518 	mov	(_Decod7Seg + 0x0003),#0xb0
      00001D 75*0C 99         [24]  519 	mov	(_Decod7Seg + 0x0004),#0x99
      000020 75*0D 92         [24]  520 	mov	(_Decod7Seg + 0x0005),#0x92
      000023 75*0E 82         [24]  521 	mov	(_Decod7Seg + 0x0006),#0x82
      000026 75*0F F8         [24]  522 	mov	(_Decod7Seg + 0x0007),#0xf8
      000029 75*10 80         [24]  523 	mov	(_Decod7Seg + 0x0008),#0x80
      00002C 75*11 90         [24]  524 	mov	(_Decod7Seg + 0x0009),#0x90
                                    525 	.area GSFINAL (CODE)
      000000 02r00r0E         [24]  526 	ljmp	__sdcc_program_startup
                                    527 ;--------------------------------------------------------
                                    528 ; Home
                                    529 ;--------------------------------------------------------
                                    530 	.area HOME    (CODE)
                                    531 	.area HOME    (CODE)
      00000E                        532 __sdcc_program_startup:
      00000E 02r00r0B         [24]  533 	ljmp	_main
                                    534 ;	return from main will return to caller
                                    535 ;--------------------------------------------------------
                                    536 ; code
                                    537 ;--------------------------------------------------------
                                    538 	.area CSEG    (CODE)
                                    539 ;------------------------------------------------------------
                                    540 ;Allocation info for local variables in function 'recarregaTimer'
                                    541 ;------------------------------------------------------------
                           000000   542 	G$recarregaTimer$0$0 ==.
                           000000   543 	C$MUX.c$10$0_0$1 ==.
                                    544 ;	MUX.c:10: void recarregaTimer(){
                                    545 ;	-----------------------------------------
                                    546 ;	 function recarregaTimer
                                    547 ;	-----------------------------------------
      000000                        548 _recarregaTimer:
                           000007   549 	ar7 = 0x07
                           000006   550 	ar6 = 0x06
                           000005   551 	ar5 = 0x05
                           000004   552 	ar4 = 0x04
                           000003   553 	ar3 = 0x03
                           000002   554 	ar2 = 0x02
                           000001   555 	ar1 = 0x01
                           000000   556 	ar0 = 0x00
                           000000   557 	C$MUX.c$12$1_0$1 ==.
                                    558 ;	MUX.c:12: TR0=0;
                                    559 ;	assignBit
      000000 C2 8C            [12]  560 	clr	_TR0
                           000002   561 	C$MUX.c$13$1_0$1 ==.
                                    562 ;	MUX.c:13: TH0=0x0FF;
      000002 75 8C FF         [24]  563 	mov	_TH0,#0xff
                           000005   564 	C$MUX.c$14$1_0$1 ==.
                                    565 ;	MUX.c:14: TL0=0x0DC;
      000005 75 8A DC         [24]  566 	mov	_TL0,#0xdc
                           000008   567 	C$MUX.c$15$1_0$1 ==.
                                    568 ;	MUX.c:15: TR0=1;
                                    569 ;	assignBit
      000008 D2 8C            [12]  570 	setb	_TR0
                           00000A   571 	C$MUX.c$17$1_0$1 ==.
                                    572 ;	MUX.c:17: }
                           00000A   573 	C$MUX.c$17$1_0$1 ==.
                           00000A   574 	XG$recarregaTimer$0$0 ==.
      00000A 22               [24]  575 	ret
                                    576 ;------------------------------------------------------------
                                    577 ;Allocation info for local variables in function 'main'
                                    578 ;------------------------------------------------------------
                           00000B   579 	G$main$0$0 ==.
                           00000B   580 	C$MUX.c$19$1_0$2 ==.
                                    581 ;	MUX.c:19: void main(){
                                    582 ;	-----------------------------------------
                                    583 ;	 function main
                                    584 ;	-----------------------------------------
      00000B                        585 _main:
                           00000B   586 	C$MUX.c$21$1_0$2 ==.
                                    587 ;	MUX.c:21: TMOD=1;
      00000B 75 89 01         [24]  588 	mov	_TMOD,#0x01
                           00000E   589 	C$MUX.c$22$1_0$2 ==.
                                    590 ;	MUX.c:22: EA=1;
                                    591 ;	assignBit
      00000E D2 AF            [12]  592 	setb	_EA
                           000010   593 	C$MUX.c$23$1_0$2 ==.
                                    594 ;	MUX.c:23: ET0=1;
                                    595 ;	assignBit
      000010 D2 A9            [12]  596 	setb	_ET0
                           000012   597 	C$MUX.c$24$1_0$2 ==.
                                    598 ;	MUX.c:24: TH0=0x0FF;
      000012 75 8C FF         [24]  599 	mov	_TH0,#0xff
                           000015   600 	C$MUX.c$25$1_0$2 ==.
                                    601 ;	MUX.c:25: TL0=0x0DC;
      000015 75 8A DC         [24]  602 	mov	_TL0,#0xdc
                           000018   603 	C$MUX.c$26$1_0$2 ==.
                                    604 ;	MUX.c:26: TR0=1;
                                    605 ;	assignBit
      000018 D2 8C            [12]  606 	setb	_TR0
                           00001A   607 	C$MUX.c$28$1_0$2 ==.
                                    608 ;	MUX.c:28: while(1){}
      00001A                        609 00102$:
      00001A 80 FE            [24]  610 	sjmp	00102$
                           00001C   611 	C$MUX.c$30$1_0$2 ==.
                                    612 ;	MUX.c:30: }
                           00001C   613 	C$MUX.c$30$1_0$2 ==.
                           00001C   614 	XG$main$0$0 ==.
      00001C 22               [24]  615 	ret
                                    616 ;------------------------------------------------------------
                                    617 ;Allocation info for local variables in function 'interrupcaoTimer1'
                                    618 ;------------------------------------------------------------
                           00001D   619 	G$interrupcaoTimer1$0$0 ==.
                           00001D   620 	C$MUX.c$32$1_0$4 ==.
                                    621 ;	MUX.c:32: void interrupcaoTimer1() __interrupt 1{
                                    622 ;	-----------------------------------------
                                    623 ;	 function interrupcaoTimer1
                                    624 ;	-----------------------------------------
      00001D                        625 _interrupcaoTimer1:
      00001D C0*00            [24]  626 	push	bits
      00001F C0 E0            [24]  627 	push	acc
      000021 C0 F0            [24]  628 	push	b
      000023 C0 82            [24]  629 	push	dpl
      000025 C0 83            [24]  630 	push	dph
      000027 C0 07            [24]  631 	push	(0+7)
      000029 C0 06            [24]  632 	push	(0+6)
      00002B C0 05            [24]  633 	push	(0+5)
      00002D C0 04            [24]  634 	push	(0+4)
      00002F C0 03            [24]  635 	push	(0+3)
      000031 C0 02            [24]  636 	push	(0+2)
      000033 C0 01            [24]  637 	push	(0+1)
      000035 C0 00            [24]  638 	push	(0+0)
      000037 C0 D0            [24]  639 	push	psw
      000039 75 D0 00         [24]  640 	mov	psw,#0x00
                           00003C   641 	C$MUX.c$34$1_0$4 ==.
                                    642 ;	MUX.c:34: if(++UnidSegundos==10){
      00003C 05*00            [12]  643 	inc	_UnidSegundos
      00003E E4               [12]  644 	clr	a
      00003F B5*00 02         [24]  645 	cjne	a,_UnidSegundos,00127$
      000042 05*01            [12]  646 	inc	(_UnidSegundos + 1)
      000044                        647 00127$:
      000044 74 0A            [12]  648 	mov	a,#0x0a
      000046 B5*00 06         [24]  649 	cjne	a,_UnidSegundos,00128$
      000049 E4               [12]  650 	clr	a
      00004A B5*01 02         [24]  651 	cjne	a,(_UnidSegundos + 1),00128$
      00004D 80 02            [24]  652 	sjmp	00129$
      00004F                        653 00128$:
      00004F 80 58            [24]  654 	sjmp	00108$
      000051                        655 00129$:
                           000051   656 	C$MUX.c$36$2_0$5 ==.
                                    657 ;	MUX.c:36: UnidSegundos=0;
      000051 E4               [12]  658 	clr	a
      000052 F5*00            [12]  659 	mov	_UnidSegundos,a
      000054 F5*01            [12]  660 	mov	(_UnidSegundos + 1),a
                           000056   661 	C$MUX.c$37$2_0$5 ==.
                                    662 ;	MUX.c:37: DezSegundos++;
      000056 05*02            [12]  663 	inc	_DezSegundos
                                    664 ;	genFromRTrack removed	clr	a
      000058 B5*02 02         [24]  665 	cjne	a,_DezSegundos,00130$
      00005B 05*03            [12]  666 	inc	(_DezSegundos + 1)
      00005D                        667 00130$:
                           00005D   668 	C$MUX.c$39$2_0$5 ==.
                                    669 ;	MUX.c:39: if(DezSegundos==6){
      00005D 74 06            [12]  670 	mov	a,#0x06
      00005F B5*02 06         [24]  671 	cjne	a,_DezSegundos,00131$
      000062 E4               [12]  672 	clr	a
      000063 B5*03 02         [24]  673 	cjne	a,(_DezSegundos + 1),00131$
      000066 80 02            [24]  674 	sjmp	00132$
      000068                        675 00131$:
      000068 80 3F            [24]  676 	sjmp	00108$
      00006A                        677 00132$:
                           00006A   678 	C$MUX.c$41$3_0$6 ==.
                                    679 ;	MUX.c:41: DezSegundos=0;
      00006A E4               [12]  680 	clr	a
      00006B F5*02            [12]  681 	mov	_DezSegundos,a
      00006D F5*03            [12]  682 	mov	(_DezSegundos + 1),a
                           00006F   683 	C$MUX.c$42$3_0$6 ==.
                                    684 ;	MUX.c:42: UnidMinutos++;
      00006F 05*04            [12]  685 	inc	_UnidMinutos
                                    686 ;	genFromRTrack removed	clr	a
      000071 B5*04 02         [24]  687 	cjne	a,_UnidMinutos,00133$
      000074 05*05            [12]  688 	inc	(_UnidMinutos + 1)
      000076                        689 00133$:
                           000076   690 	C$MUX.c$44$3_0$6 ==.
                                    691 ;	MUX.c:44: if(UnidMinutos==10){
      000076 74 0A            [12]  692 	mov	a,#0x0a
      000078 B5*04 06         [24]  693 	cjne	a,_UnidMinutos,00134$
      00007B E4               [12]  694 	clr	a
      00007C B5*05 02         [24]  695 	cjne	a,(_UnidMinutos + 1),00134$
      00007F 80 02            [24]  696 	sjmp	00135$
      000081                        697 00134$:
      000081 80 26            [24]  698 	sjmp	00108$
      000083                        699 00135$:
                           000083   700 	C$MUX.c$46$4_0$7 ==.
                                    701 ;	MUX.c:46: UnidMinutos=0;
      000083 E4               [12]  702 	clr	a
      000084 F5*04            [12]  703 	mov	_UnidMinutos,a
      000086 F5*05            [12]  704 	mov	(_UnidMinutos + 1),a
                           000088   705 	C$MUX.c$47$4_0$7 ==.
                                    706 ;	MUX.c:47: DezMinutos++;
      000088 05*06            [12]  707 	inc	_DezMinutos
                                    708 ;	genFromRTrack removed	clr	a
      00008A B5*06 02         [24]  709 	cjne	a,_DezMinutos,00136$
      00008D 05*07            [12]  710 	inc	(_DezMinutos + 1)
      00008F                        711 00136$:
                           00008F   712 	C$MUX.c$49$4_0$7 ==.
                                    713 ;	MUX.c:49: if(++DezMinutos==6){DezMinutos=0;}
      00008F 05*06            [12]  714 	inc	_DezMinutos
      000091 E4               [12]  715 	clr	a
      000092 B5*06 02         [24]  716 	cjne	a,_DezMinutos,00137$
      000095 05*07            [12]  717 	inc	(_DezMinutos + 1)
      000097                        718 00137$:
      000097 74 06            [12]  719 	mov	a,#0x06
      000099 B5*06 06         [24]  720 	cjne	a,_DezMinutos,00138$
      00009C E4               [12]  721 	clr	a
      00009D B5*07 02         [24]  722 	cjne	a,(_DezMinutos + 1),00138$
      0000A0 80 02            [24]  723 	sjmp	00139$
      0000A2                        724 00138$:
      0000A2 80 05            [24]  725 	sjmp	00108$
      0000A4                        726 00139$:
      0000A4 E4               [12]  727 	clr	a
      0000A5 F5*06            [12]  728 	mov	_DezMinutos,a
      0000A7 F5*07            [12]  729 	mov	(_DezMinutos + 1),a
      0000A9                        730 00108$:
                           0000A9   731 	C$MUX.c$56$1_0$4 ==.
                                    732 ;	MUX.c:56: Display7Seg();
      0000A9 12r00rC9         [24]  733 	lcall	_Display7Seg
                           0000AC   734 	C$MUX.c$57$1_0$4 ==.
                                    735 ;	MUX.c:57: }
      0000AC D0 D0            [24]  736 	pop	psw
      0000AE D0 00            [24]  737 	pop	(0+0)
      0000B0 D0 01            [24]  738 	pop	(0+1)
      0000B2 D0 02            [24]  739 	pop	(0+2)
      0000B4 D0 03            [24]  740 	pop	(0+3)
      0000B6 D0 04            [24]  741 	pop	(0+4)
      0000B8 D0 05            [24]  742 	pop	(0+5)
      0000BA D0 06            [24]  743 	pop	(0+6)
      0000BC D0 07            [24]  744 	pop	(0+7)
      0000BE D0 83            [24]  745 	pop	dph
      0000C0 D0 82            [24]  746 	pop	dpl
      0000C2 D0 F0            [24]  747 	pop	b
      0000C4 D0 E0            [24]  748 	pop	acc
      0000C6 D0*00            [24]  749 	pop	bits
                           0000C8   750 	C$MUX.c$57$1_0$4 ==.
                           0000C8   751 	XG$interrupcaoTimer1$0$0 ==.
      0000C8 32               [24]  752 	reti
                                    753 ;------------------------------------------------------------
                                    754 ;Allocation info for local variables in function 'Display7Seg'
                                    755 ;------------------------------------------------------------
                           0000C9   756 	G$Display7Seg$0$0 ==.
                           0000C9   757 	C$MUX.c$59$1_0$9 ==.
                                    758 ;	MUX.c:59: void Display7Seg(){
                                    759 ;	-----------------------------------------
                                    760 ;	 function Display7Seg
                                    761 ;	-----------------------------------------
      0000C9                        762 _Display7Seg:
                           0000C9   763 	C$MUX.c$61$1_0$9 ==.
                                    764 ;	MUX.c:61: if(UnidSegundos<10){
      0000C9 C3               [12]  765 	clr	c
      0000CA E5*00            [12]  766 	mov	a,_UnidSegundos
      0000CC 94 0A            [12]  767 	subb	a,#0x0a
      0000CE E5*01            [12]  768 	mov	a,(_UnidSegundos + 1)
      0000D0 64 80            [12]  769 	xrl	a,#0x80
      0000D2 94 80            [12]  770 	subb	a,#0x80
      0000D4 50 5A            [24]  771 	jnc	00109$
                           0000D6   772 	C$MUX.c$63$2_0$10 ==.
                                    773 ;	MUX.c:63: P1=255;
      0000D6 75 90 FF         [24]  774 	mov	_P1,#0xff
                           0000D9   775 	C$MUX.c$64$2_0$10 ==.
                                    776 ;	MUX.c:64: P2=Decod7Seg[UnidSegundos];
      0000D9 E5*00            [12]  777 	mov	a,_UnidSegundos
      0000DB 24r08            [12]  778 	add	a,#_Decod7Seg
      0000DD F9               [12]  779 	mov	r1,a
      0000DE 87 A0            [24]  780 	mov	_P2,@r1
                           0000E0   781 	C$MUX.c$65$2_0$10 ==.
                                    782 ;	MUX.c:65: P1_0=0;
                                    783 ;	assignBit
      0000E0 C2 90            [12]  784 	clr	_P1_0
                           0000E2   785 	C$MUX.c$67$2_0$10 ==.
                                    786 ;	MUX.c:67: if(DezSegundos<6){
      0000E2 C3               [12]  787 	clr	c
      0000E3 E5*02            [12]  788 	mov	a,_DezSegundos
      0000E5 94 06            [12]  789 	subb	a,#0x06
      0000E7 E5*03            [12]  790 	mov	a,(_DezSegundos + 1)
      0000E9 64 80            [12]  791 	xrl	a,#0x80
      0000EB 94 80            [12]  792 	subb	a,#0x80
      0000ED 50 41            [24]  793 	jnc	00109$
                           0000EF   794 	C$MUX.c$69$3_0$11 ==.
                                    795 ;	MUX.c:69: P1=255;
      0000EF 75 90 FF         [24]  796 	mov	_P1,#0xff
                           0000F2   797 	C$MUX.c$70$3_0$11 ==.
                                    798 ;	MUX.c:70: P2=Decod7Seg[DezSegundos];
      0000F2 E5*02            [12]  799 	mov	a,_DezSegundos
      0000F4 24r08            [12]  800 	add	a,#_Decod7Seg
      0000F6 F9               [12]  801 	mov	r1,a
      0000F7 87 A0            [24]  802 	mov	_P2,@r1
                           0000F9   803 	C$MUX.c$71$3_0$11 ==.
                                    804 ;	MUX.c:71: P1_1=0;
                                    805 ;	assignBit
      0000F9 C2 91            [12]  806 	clr	_P1_1
                           0000FB   807 	C$MUX.c$73$3_0$11 ==.
                                    808 ;	MUX.c:73: if(UnidMinutos<10){
      0000FB C3               [12]  809 	clr	c
      0000FC E5*04            [12]  810 	mov	a,_UnidMinutos
      0000FE 94 0A            [12]  811 	subb	a,#0x0a
      000100 E5*05            [12]  812 	mov	a,(_UnidMinutos + 1)
      000102 64 80            [12]  813 	xrl	a,#0x80
      000104 94 80            [12]  814 	subb	a,#0x80
      000106 50 28            [24]  815 	jnc	00109$
                           000108   816 	C$MUX.c$75$4_0$12 ==.
                                    817 ;	MUX.c:75: P1=255;
      000108 75 90 FF         [24]  818 	mov	_P1,#0xff
                           00010B   819 	C$MUX.c$76$4_0$12 ==.
                                    820 ;	MUX.c:76: P2=Decod7Seg[UnidMinutos];
      00010B E5*04            [12]  821 	mov	a,_UnidMinutos
      00010D 24r08            [12]  822 	add	a,#_Decod7Seg
      00010F F9               [12]  823 	mov	r1,a
      000110 87 A0            [24]  824 	mov	_P2,@r1
                           000112   825 	C$MUX.c$77$4_0$12 ==.
                                    826 ;	MUX.c:77: P1_2=0;
                                    827 ;	assignBit
      000112 C2 92            [12]  828 	clr	_P1_2
                           000114   829 	C$MUX.c$79$4_0$12 ==.
                                    830 ;	MUX.c:79: if(DezMinutos<6){
      000114 C3               [12]  831 	clr	c
      000115 E5*06            [12]  832 	mov	a,_DezMinutos
      000117 94 06            [12]  833 	subb	a,#0x06
      000119 E5*07            [12]  834 	mov	a,(_DezMinutos + 1)
      00011B 64 80            [12]  835 	xrl	a,#0x80
      00011D 94 80            [12]  836 	subb	a,#0x80
      00011F 50 0F            [24]  837 	jnc	00109$
                           000121   838 	C$MUX.c$81$5_0$13 ==.
                                    839 ;	MUX.c:81: P1=255;
      000121 75 90 FF         [24]  840 	mov	_P1,#0xff
                           000124   841 	C$MUX.c$82$5_0$13 ==.
                                    842 ;	MUX.c:82: P2=Decod7Seg[DezMinutos];
      000124 E5*06            [12]  843 	mov	a,_DezMinutos
      000126 24r08            [12]  844 	add	a,#_Decod7Seg
      000128 F9               [12]  845 	mov	r1,a
      000129 87 A0            [24]  846 	mov	_P2,@r1
                           00012B   847 	C$MUX.c$83$5_0$13 ==.
                                    848 ;	MUX.c:83: P1_3=0;
                                    849 ;	assignBit
      00012B C2 93            [12]  850 	clr	_P1_3
                           00012D   851 	C$MUX.c$84$5_0$13 ==.
                                    852 ;	MUX.c:84: recarregaTimer();
      00012D 12r00r00         [24]  853 	lcall	_recarregaTimer
      000130                        854 00109$:
                           000130   855 	C$MUX.c$93$1_0$9 ==.
                                    856 ;	MUX.c:93: }
                           000130   857 	C$MUX.c$93$1_0$9 ==.
                           000130   858 	XG$Display7Seg$0$0 ==.
      000130 22               [24]  859 	ret
                                    860 	.area CSEG    (CODE)
                                    861 	.area CONST   (CODE)
                                    862 	.area XINIT   (CODE)
                                    863 	.area CABS    (ABS,CODE)
